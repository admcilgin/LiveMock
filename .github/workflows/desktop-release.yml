name: Desktop Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: string

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version || github.ref }}
          release_name: Release ${{ github.event.inputs.version || github.ref }}
          draft: false
          prerelease: false

  build-mac:
    needs: create_release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: moim-features
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Build core
        run: yarn workspace livemock-core build

      - name: Build desktop app
        run: yarn workspace livemock build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find DMG file
        id: find_dmg
        run: |
          DMG_PATH=$(find desktop/release -type f -name "*.dmg" | head -n 1)
          echo "DMG_PATH=${DMG_PATH}" >> $GITHUB_ENV
          echo "DMG_NAME=$(basename ${DMG_PATH})" >> $GITHUB_ENV
          echo "Found DMG at: ${DMG_PATH}"

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.DMG_PATH }}
          asset_name: ${{ env.DMG_NAME }}
          asset_content_type: application/octet-stream

  build-windows:
    needs: create_release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: moim-features
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Build core
        run: yarn workspace livemock-core build

      - name: Build desktop app
        run: yarn workspace livemock build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find EXE file
        id: find_exe
        shell: pwsh
        run: |
          $EXE_PATH = (Get-ChildItem -Path desktop\release -Recurse -Filter "*.exe" | Select-Object -First 1).FullName
          echo "EXE_PATH=$EXE_PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "EXE_NAME=$(Split-Path -Leaf $EXE_PATH)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Found EXE at: $EXE_PATH"

      - name: Upload Windows EXE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXE_PATH }}
          asset_name: ${{ env.EXE_NAME }}
          asset_content_type: application/octet-stream

  build-linux:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: moim-features
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Build core
        run: yarn workspace livemock-core build

      - name: Build desktop app
        run: yarn workspace livemock build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find AppImage file
        id: find_appimage
        run: |
          APPIMAGE_PATH=$(find desktop/release -type f -name "*.AppImage" | head -n 1)
          echo "APPIMAGE_PATH=${APPIMAGE_PATH}" >> $GITHUB_ENV
          echo "APPIMAGE_NAME=$(basename ${APPIMAGE_PATH})" >> $GITHUB_ENV
          echo "Found AppImage at: ${APPIMAGE_PATH}"

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.APPIMAGE_PATH }}
          asset_name: ${{ env.APPIMAGE_NAME }}
          asset_content_type: application/octet-stream